type ClockTime {
  id: Int!
  startTime: String!
  endTime: String!
  timesheetId: Int!
}

type Timesheet {
  id: Int!
  userId: Int!
  hourlyWage: Float!
}

type Schedule {
  id: Int!
  userId: Int!
  dateTimeStart: String!
  dateTimeEnd: String!
  role: Role!
  notes: String
}

type Role {
  id: Int!
  code: String!
  title: String!
  description: String
  hourlyWage: Int
}

type User {
  id: Int!
  firstName: String!
  middleName: String
  lastName: String!
  dateOfBirth: String!
  email: String!
  streetName: String!
  addressL2: String
  city: String!
  pincode: String!
  province: String!
  phone: String!
  country: String!
  dateJoined: String!
  status: String
  type: String
  organization: Organization
  roles: [Role!]!
}

type Organization {
  id: Int!
  name: String!
  summary: String
  webUrl: String,
  bannerUrl: String,
  logoUrl: String
}

type UserSyncResult {
  accepted: Int!
  rejected: Int!
}


# Input types
input CreateUserInput {
  firstName: String!
  middleName: String
  lastName: String!
  dateOfBirth: String!
  email: String!
  phone: String!
  streetName: String!
  addressL2: String
  city: String!
  pincode: String!
  province: String!
  country: String!
  password: String!
  dateJoined: String!
  roleIds: [Int!]
}

input CreateOrganizationInput {
  name: String!
  summary: String
  webUrl: String!
  bannerUrl: String!
  logoUrl: String!
}

input UpdateOrganizationInput {
  name: String
  summary: String
  webUrl: String,
  bannerUrl: String,
  logoUrl: String
}

input RoleInput {
  code: String!
  title: String!
  description: String
  hourlyWage: Int
}


# Root types
type Query {
  currentUser: User
  users: [User]!
  roles: [Role!]!
}

type Mutation {
  createRole(input: RoleInput!): Int!
  createOrganization(input: CreateOrganizationInput!): Int!
  createUser(input: CreateUserInput!): Int!
  updateOrganization(id: Int!, input: UpdateOrganizationInput!): Int!
  syncUsers(force: Boolean): UserSyncResult!
}
