enum Role {
  SUPER
  ADMIN
  MANAGER
  LEAD
  EMPLOYEE
}

enum SyncStatus {
  NEVER
  OK
  FAIL
}

type ClockTime {
  id: Int!
  startTime: String!
  endTime: String!
  timesheetId: Int!
}

type Timesheet {
  id: Int!
  userId: Int!
  hourlyWage: Float!
}

type Schedule {
  id: Int!
  userId: Int!
  dateTimeStart: String!
  dateTimeEnd: String!
  role: Role!
  notes: String
}

type Position {
  id: Int!
  title: String!
  description: String
  hourlyWage: Int
}

type User {
  id: Int!
  firstName: String!
  middleName: String
  lastName: String!
  dateOfBirth: String!
  email: String!
  streetName: String!
  addressL2: String
  city: String!
  pincode: String!
  province: String!
  phone: String!
  country: String!
  dateJoined: String!
  status: String
  syncStatus: SyncStatus
  organization: Organization
  schedules: [Schedule]
  timesheets: [Timesheet]
  roles: [Role!]!
  positions: [Position]!
}

type Organization {
  id: Int!
  name: String!
  summary: String
  webUrl: String,
  bannerUrl: String,
  logoUrl: String
}

type UserSyncResult {
  accepted: Int!
  rejected: Int!
}


# Input types
input CreateUserInput {
  firstName: String!
  middleName: String
  lastName: String!
  dateOfBirth: String!
  email: String!
  phone: String!
  streetName: String!
  addressL2: String
  city: String!
  pincode: String!
  province: String!
  country: String!
  password: String!
  dateJoined: String!
  roles: [Role!]
  positionIds: [Int!]
}

input CreateOrganizationInput {
  name: String!
  summary: String
  webUrl: String!
  bannerUrl: String!
  logoUrl: String!
}

input UpdateOrganizationInput {
  name: String
  summary: String
  webUrl: String,
  bannerUrl: String,
  logoUrl: String
}

input PositionInput {
  title: String!
  description: String
  hourlyWage: Int
}

input ScheduleInput {
  dateTimeStart: String!
  dateTimeEnd: String!
  positionId: Int!
  notes: String
}

input ListScheduleFilterInput {
  userId: Int
  date: String
}


# Root types
type Query {
  currentUser: User
  user(id: Int!): User!
  users: [User]!

  # Shift scheduling
  scheduledShifts(filters: ListScheduleFilterInput): [Schedule]!
}

type Mutation {
  createPosition(input: PositionInput!): Int!
  createOrganization(input: CreateOrganizationInput!): Int!
  createUser(input: CreateUserInput!): Int!
  updateOrganization(id: Int!, input: UpdateOrganizationInput!): Int!
  syncUsers(force: Boolean): UserSyncResult!

  # Shift scheduling
  scheduleShiftFor(userId: Int!, input: ScheduleInput!): Int!
  unscheduleShift(shiftId: Int!): Int!
}
