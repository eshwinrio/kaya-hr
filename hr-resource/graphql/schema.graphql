scalar ISODate
scalar Decimal

enum Role {
  SUPER
  ADMIN
  MANAGER
  LEAD
  EMPLOYEE
}

enum SyncStatus {
  NEVER
  OK
  FAIL
}

enum PaymentStatus {
  CANCELED
  PENDING
  COMPLETED
}

enum PunchApprovalStatus {
  REJECTED
  PENDING
  APPROVED
}

# <Interfaces>
input Pagination {
  take: Int
  skip: Int
}
# </Interfaces>


# <Primitive types>
type ClockTime {
  id: Int!
  startTime: ISODate!
  endTime: ISODate
  netHours: Int
  hourlyWage: Decimal!
  earning: Decimal
  user: User
  payroll: Payroll
  approvalStatus: PunchApprovalStatus!
}

type Organization {
  id: Int!
  name: String!
  summary: String
  webUrl: String
  bannerUrl: String
  logoUrl: String
  users: [User!]
}

type Position {
  id: Int!
  title: String!
  description: String
  hourlyWage: Decimal
  organization: Organization
  users: [User!]
  schedules: [Schedule!]
}

type Payslip {
  id: Int!
  generatedOn: ISODate!
  dispensedOn: ISODate
  deductions: Decimal
  netPay: Decimal!
  paymentMethod: String
  paymentStatus: PaymentStatus!
  employee: User!
  clockTimes: [ClockTime!]
}

type Payroll {
  id: Int!
  periodStart: ISODate!
  periodEnd: ISODate!
  generatedOn: ISODate!
  netOutstanding: Decimal!
  organization: Organization
  payslips: [Payslip!]
}

type Schedule {
  id: Int!
  title: String!
  description: String
  notes: String
  dateTimeStart: ISODate!
  dateTimeEnd: ISODate!
  employees: [User!]
  createdBy: User
  createdAt: ISODate!
}

type ScheduleAssignment {
  id: Int!
  user: User!
  schedule: Schedule!
  position: Position!
}

type User {
  id: Int!
  firstName: String!
  middleName: String
  lastName: String!
  dateOfBirth: ISODate!
  email: String!
  streetName: String!
  addressL2: String
  city: String!
  pincode: String!
  province: String!
  phone: String!
  country: String!
  dateJoined: ISODate!
  status: String
  syncStatus: SyncStatus
  profileIconUrl: String
  bannerUrl: String
  organization: Organization
  schedules: [ScheduleAssignment!]
  roles: [Role!]
  positions: [Position!]
}
# </Primitive types>


# <Output types>
type UserSyncResult {
  accepted: Int!
  rejected: Int!
}

type PayrollPeriod {
  startsOn: ISODate!
  endsOn: ISODate!
}
# </Output types>


# <Input types>
input CreateUserInput {
  firstName: String!
  middleName: String
  lastName: String!
  email: String!
  dateOfBirth: ISODate!
  streetName: String!
  addressL2: String
  city: String!
  pincode: String!
  province: String!
  phone: String!
  country: String!
  dateJoined: ISODate!
  status: String
  organizationId: Int
  profileIconUrl: String
  bannerUrl: String
  password: String!
  roles: [Role!]
  positionId: Int!
}

input UpdateUserInput {
  firstName: String
  middleName: String
  lastName: String
  dateOfBirth: ISODate
  streetName: String
  addressL2: String
  city: String
  pincode: String
  province: String
  phone: String
  country: String
  dateJoined: ISODate
  status: String
  profileIconUrl: String
  bannerUrl: String
  roles: [Role!]
  positionId: Int!
}

input CreateOrganizationInput {
  name: String!
  summary: String
  webUrl: String!
  bannerUrl: String!
  logoUrl: String!
}

input UpdateOrganizationInput {
  name: String
  summary: String
  webUrl: String
  bannerUrl: String
  logoUrl: String
}

input PositionInput {
  title: String!
  description: String
  hourlyWage: Decimal
}

input ScheduleAssigneeInput {
  userId: Int!
}

input ScheduleInput {
  title: String
  description: String
  dateTimeStart: ISODate!
  dateTimeEnd: ISODate!
  assignees: [ScheduleAssigneeInput!]
  notes: String
}

input ListScheduleFilter {
  userId: Int
  createdByUserId: Int
  title: String
  from: ISODate
  to: ISODate
  pagination: Pagination
}

input ViewUserOptions {
  scheduleFilters: ListScheduleFilter
}

input ListUsersFilter {
  searchTerm: String
  ids: [Int!]
  roles: [Role!]
  limit: Int
}

input ListPunchesFilter {
  userId: Int
  organizationId: Int
  paymentStatus: [PaymentStatus!]
  from: ISODate
  to: ISODate
  activeOnly: Boolean
  pagination: Pagination
}

input PayslipsFilter {
  employeeId: Int
  onlyPending: Boolean
  onlyCurrentPeriod: Boolean
}

input GeneratePayrollOptions {
  employeeIds: [Int!]
  periodStart: ISODate!
  periodEnd: ISODate!
}
# </Input types>

# <ComponentSpecificQueries>
type PayrollSummary {
  payrollId: Int!
  periodStart: ISODate!
  periodEnd: ISODate!
  totalTasks: Int!
  pendingTasks: Int!
  completedTasks: Int!
  rejectedTasks: Int!
}
# </ComponentSpecificQueries>

# <PageSpecificQueries>
type PayrollsIndex {
  week: Int!
  year: Int!
  currentCycleStart: ISODate!
  currentCycleEnd: ISODate!
  amountOutstanding: Decimal!
  previousPayrolls: [Payroll!]!
  activePayslips: [Payslip!]!
  currentPayrollSummary: PayrollSummary
}

type PayslipPage {
  id: Int!
  generatedOn: ISODate!
  dispensedOn: ISODate
  deductions: Decimal
  netPay: Decimal!
  paymentMethod: String
  paymentStatus: PaymentStatus!
  invoiceUuid: String
  employee: User
  clockTimes: [ClockTime!]!
}
# </PageSpecificQueries>


# Root types
type Query {
  # Users
  currentUser(options: ViewUserOptions): User!
  user(id: Int!, options: ViewUserOptions): User!
  users(options: ListUsersFilter): [User!]!

  # Shift scheduling
  schedule(id: Int!): Schedule!
  schedules(filters: ListScheduleFilter): [Schedule!]!
  scheduledShifts(filters: ListScheduleFilter): [ScheduleAssignment!]!

  # Timesheet
  punches(filter: ListPunchesFilter): [ClockTime!]!
  payrollPeriods: PayrollPeriod
  payrolls: [Payroll!]!
  payslips(filter: PayslipsFilter): [Payslip!]!

  # PageSpecificQueries
  payrollsIndex: PayrollsIndex!
  viewPayslip(payslipId: Int!): PayslipPage

  # ComponentSpecificQueries
  positionPicker: [Position!]!
}

type Mutation {
  # Users
  createPosition(input: PositionInput!): Position!
  createOrganization(input: CreateOrganizationInput!): Organization!
  updateOrganization(id: Int!, input: UpdateOrganizationInput!): Organization!
  syncUsers(force: Boolean): UserSyncResult!

  # Shift scheduling
  createSchedule(input: ScheduleInput!): Schedule!
  updateSchedule(scheduleId: Int!, input: ScheduleInput!): Schedule!
  deleteSchedule(scheduleId: Int!): Schedule!
  assignUserToSchedule(scheduleId: Int!, userId: Int!, positionId: Int!): ScheduleAssignment!

  # Timesheet actions
  registerPunch: ClockTime!
  generatePayroll(options: GeneratePayrollOptions!): Int!

  # PageSpecificActions
  createUser(input: CreateUserInput!): User!
  updateUser(userId: Int!, input: UpdateUserInput!): User!
  generateInvoice(payslipId: Int!): String!

  # ComponentSpecificActions
  generatePayslips: Boolean
}
