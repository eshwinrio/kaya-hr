scalar ISODate
scalar Decimal

enum Role {
  SUPER
  ADMIN
  MANAGER
  LEAD
  EMPLOYEE
}

enum SyncStatus {
  NEVER
  OK
  FAIL
}

type ClockTime {
  id: Int!
  startTime: ISODate!
  endTime: ISODate
}

type Timesheet {
  id: Int!
  userId: Int!
  hourlyWage: Decimal!
}

type Schedule {
  id: Int!
  title: String!
  notes: String
  dateTimeStart: ISODate!
  dateTimeEnd: ISODate!
  employees: [User!]
  createdBy: User
  createdAt: ISODate!
  positions: [Position!]
}

type Position {
  id: Int!
  title: String!
  description: String
  hourlyWage: Decimal
  users: [User!]
  schedules: [User!]
}

type User {
  id: Int!
  firstName: String!
  middleName: String
  lastName: String!
  dateOfBirth: ISODate!
  email: String!
  streetName: String!
  addressL2: String
  city: String!
  pincode: String!
  province: String!
  phone: String!
  country: String!
  dateJoined: ISODate!
  status: String
  syncStatus: SyncStatus
  profileIconUrl: String
  bannerUrl: String
  organization: Organization
  timesheets: [Timesheet!]
  schedules: [ScheduleAssignment!]
  roles: [Role!]
  positions: [Position!]
}

type ScheduleAssignment {
  id: Int!
  user: User!
  schedule: Schedule!
  position: Position!
}

type Organization {
  id: Int!
  name: String!
  summary: String
  webUrl: String
  bannerUrl: String
  logoUrl: String
  users: [User!]
}

type UserSyncResult {
  accepted: Int!
  rejected: Int!
}

type ListPunches {
  activePunch: ClockTime
  history: [ClockTime!]
}

# Input types
input CreateUserInput {
  firstName: String!
  middleName: String
  lastName: String!
  email: String!
  dateOfBirth: ISODate!
  streetName: String!
  addressL2: String
  city: String!
  pincode: String!
  province: String!
  phone: String!
  country: String!
  dateJoined: ISODate!
  status: String
  organizationId: Int
  profileIconUrl: String
  bannerUrl: String
  password: String!
  roles: [Role!]
  positionIds: [Int!]
}

input UpdateUserInput {
  firstName: String
  middleName: String
  lastName: String
  dateOfBirth: ISODate
  streetName: String
  addressL2: String
  city: String
  pincode: String
  province: String
  phone: String
  country: String
  dateJoined: ISODate
  status: String
  profileIconUrl: String
  bannerUrl: String
  roles: [Role!]
  positionIds: [Int!]
}

input CreateOrganizationInput {
  name: String!
  summary: String
  webUrl: String!
  bannerUrl: String!
  logoUrl: String!
}

input UpdateOrganizationInput {
  name: String
  summary: String
  webUrl: String
  bannerUrl: String
  logoUrl: String
}

input PositionInput {
  title: String!
  description: String
  hourlyWage: Decimal
}

input ScheduleAssigneeInput {
  userId: Int!
  positionId: Int!
}

input ScheduleInput {
  title: String
  dateTimeStart: ISODate!
  dateTimeEnd: ISODate!
  assignees: [ScheduleAssigneeInput!]
  notes: String
}

input ListScheduleFilter {
  userId: Int
  createdByUserId: Int
  title: String
  from: ISODate
  to: ISODate
}

input ViewUserOptions {
  scheduleFilters: ListScheduleFilter
}

input ListUsersFilter {
  searchTerm: String
  roles: [Role!]
  limit: Int
}

input ListPunchesFilter {
  userId: Int
  organizationId: Int
  pageSize: Int
  pageNumber: Int
}

# Root types
type Query {
  # Users
  currentUser(options: ViewUserOptions): User!
  user(id: Int!, options: ViewUserOptions): User!
  users(options: ListUsersFilter): [User!]!

  # Shift scheduling
  schedule(id: Int!): Schedule!
  scheduledShifts(filters: ListScheduleFilter): [ScheduleAssignment!]!

  # Timesheet
  listPunches(filter: ListPunchesFilter): ListPunches!
}

type Mutation {
  # Users
  createPosition(input: PositionInput!): Position!
  createOrganization(input: CreateOrganizationInput!): Organization!
  createUser(input: CreateUserInput!): User!
  updateUser(userId: Int!, input: UpdateUserInput!): User!
  updateOrganization(id: Int!, input: UpdateOrganizationInput!): Organization!
  syncUsers(force: Boolean): UserSyncResult!

  # Shift scheduling
  createSchedule(input: ScheduleInput!): Schedule!
  updateSchedule(scheduleId: Int!, input: ScheduleInput!): Schedule!
  deleteSchedule(scheduleId: Int!): Schedule!
  assignUserToSchedule(scheduleId: Int!, userId: Int!, positionId: Int!): ScheduleAssignment!

  # Timesheet actions
  registerPunch: ClockTime!
}
