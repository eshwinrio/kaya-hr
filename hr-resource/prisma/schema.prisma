// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum SyncStatus {
  NEVER
  OK
  FAIL
}

model User {
  id             Int          @id @default(autoincrement())
  firstName      String
  middleName     String?
  lastName       String
  email          String       @unique
  dateOfBirth    DateTime
  streetName     String
  addressL2      String?
  city           String
  pincode        String
  province       String
  phone          String       @db.VarChar(20)
  country        String
  dateJoined     DateTime
  status         String?
  type           String?
  organizationId Int
  syncStatus     SyncStatus   @default(NEVER)
  organization   Organization @relation(fields: [organizationId], references: [id], onUpdate: Cascade, onDelete: Restrict)
  UserRoles      UserRole[]
  Schedule       Schedule[]
  TimeSheet      TimeSheet[]
}

model Role {
  id          Int        @id @default(autoincrement())
  code        String     @unique
  title       String
  description String?
  hourlyWage  Decimal
  UserRoles   UserRole[]
  Schedules   Schedule[]
}

model UserRole {
  id     Int  @id @default(autoincrement())
  userId Int
  roleId Int
  user   User @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  role   Role @relation(fields: [roleId], references: [id], onUpdate: Cascade, onDelete: Restrict)

  @@unique([userId, roleId])
}

model Organization {
  id        Int     @id @default(autoincrement())
  name      String
  summary   String? @db.VarChar(1000)
  webUrl    String?
  bannerUrl String?
  logoUrl   String?
  Users     User[]
}

model Schedule {
  id            Int      @id @default(autoincrement())
  userId        Int?
  dataTimeStart DateTime
  dateTimeEnd   DateTime
  roleId        Int
  notes         String?
  user          User?    @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: SetNull)
  role          Role     @relation(fields: [roleId], references: [id], onUpdate: Cascade, onDelete: Restrict)
}

model TimeSheet {
  id         Int         @id @default(autoincrement())
  userId     Int
  hourlyWage Decimal
  user       User        @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  ClockTimes ClockTime[]
}

model ClockTime {
  id          Int       @id @default(autoincrement())
  startTime   DateTime
  endTime     DateTime?
  timeSheetId Int
  timesheet   TimeSheet @relation(fields: [timeSheetId], references: [id], onUpdate: Cascade, onDelete: Cascade)
}
